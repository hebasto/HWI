name: CI
on:
  pull_request:
  push:
    branches: ['**']
    tags-ignore: ['**']

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  LC_ALL: 'C.UTF-8'
  LANG: 'C.UTF-8'
  LANGUAGE: 'C.UTF-8'

jobs:
  sim-builder:
    name: Sim builder
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        device:
          - { name: 'trezor-1', archive: 'trezor-firmware',  paths: 'test/work/trezor-firmware' }
          - { name: 'trezor-t', archive: 'trezor-firmware',  paths: 'test/work/trezor-firmware' }
          - { name: 'coldcard', archive: 'coldcard-mpy',     paths: 'test/work/firmware/external/micropython/ports/unix/coldcard-mpy test/work/firmware/unix/coldcard-mpy test/work/firmware/unix/l-mpy test/work/firmware/unix/l-port' }
          - { name: 'bitbox01', archive: 'mcu',              paths: 'test/work/mcu' }
          - { name: 'jade',     archive: 'jade',             paths: 'test/work/jade/simulator' }
          - { name: 'ledger',   archive: 'speculos',         paths: 'test/work/speculos' }
          - { name: 'keepkey',  archive: 'keepkey-firmware', paths: 'test/work/keepkey-firmware/bin' }

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libsdl2-image-dev libslirp-dev libpcsclite-dev ninja-build
          pip install poetry
          wget https://github.com/protocolbuffers/protobuf/releases/download/v22.0/protoc-22.0-linux-x86_64.zip
          sudo unzip protoc-22.0-linux-x86_64.zip -d /usr/local
          protoc --version

      - name: Build simulator
        run: |
          git config --global user.email "ci@ci.com"
          git config --global user.name "ci"
          cd test; ./setup_environment.sh --${{ matrix.device.name }}; cd ..
          tar -czf ${{ matrix.device.archive }}.tar.gz ${{ matrix.device.paths }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.device.name }}-sim
          path: ${{ matrix.device.archive }}.tar.gz

  ledger-app-builder:
    name: Ledger App builder
    runs-on: ubuntu-latest
    container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest
    steps:
      - run: |
          git clone https://github.com/LedgerHQ/app-bitcoin-new.git
          cd app-bitcoin-new
          make DEBUG=1

      - uses: actions/upload-artifact@v3
        with:
          name: ledger_app
          path: app-bitcoin-new/bin/app.elf

  bitcoind-builder:
    name: bitcoind builder
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-bitcoind

  test-all:
    name: Python ${{ matrix.python-version }} ${{ matrix.device }} ${{ matrix.interface }}
    runs-on: ubuntu-latest
    needs: [ sim-builder, ledger-app-builder, bitcoind-builder ]

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]
        device:
          - 'trezor-1'
          - 'trezor-t'
          - 'coldcard'
          - 'bitbox01'
          - 'jade'
          - 'ledger'
          - 'ledger-legacy'
          - 'keepkey'
        interface: [ 'library', 'cli', 'stdin' ]

    container: python:${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4

      - run: |
          pip install poetry

      - run: |
          poetry install

      - uses: actions/download-artifact@v3
        with:
          name: bitcoind

      - run: |
          tar -xvf bitcoind.tar.gz

      - uses: ./.github/actions/install-sim
        with:
          device: ${{ matrix.device }}

      - name: Run tests
        run: |
          cd test; poetry run ./run_tests.py --${{ matrix.device }} --interface=${{ matrix.interface }} --device-only; cd ..

      - if: failure()
        run: |
          tail -v -n +1 test/*.std*
